scilla_version 0
(* LoveZilliqa Contract *)
(* A two-player game where the goal is to find the closest preimage of a given SHA256 digest (puzzle). *)
(* More formally, given a digest d, and two values x and y, x is said to be a closer preimage than y *)
(* of d if Distance(SHA-256(x), d) < Distance(SHA-256(y), d), for some Distance function. The game is *)
(* played in two phases. In the first phase, players submit their hash, i.e., SHA-256(x) and SHA-256(y) *)
(* using the transition Play(guess: ByStr32). Once the first player has submitted her hash, the second *)
(* player has a bounded time to submit her hash. If the second player does not submit her hash within *)
(* the stipulated time, then the first player may become the winner. In the second phase, players have *)
(* to submit the corresponding values x or y using the transition ClaimReward(solution: Int128). The *)
(* player submitting the closest preimage is declared the winner and wins a reward. The contract also *)
(* provides a transition Withdraw () to recover funds and send to a specified owner in case no player *)
(* plays the game. *)

(***************************************************)
(*               Associated library                *)
(***************************************************)
library LoveZilliqa

(* Library codes to be used for communication *)
let one = Uint256 1
let true = True

(***************************************************)
(*             The contract definition             *)
(***************************************************)
contract LoveZilliqa
(authorName: String, twitterID: String)

(* The AsciiArt for Zilliqa â€” for fun! *)
(* MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM *)
(* MMMMMMMMMMMMMMMMMMMMWXOOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM *)
(* MMMMMMMMMMMMMMMMN0xollolllokKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM *)
(* MMMMMMMMMMMMNOdllodkKNMMNKkolloxKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM *)
(* MMMMMMMMMMMWo..,oONMMMMMMMMMWKkollox0XNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM *)
(* MMMMMMMMMMMWl;kOdllodONWMMMMMMMMWXOdlllox0NWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM *)
(* MMMMMMMMMMMWl:KMMWXOdllldOXWMMMMMMMMWWXOdllldOXWMMMMMMMMMMMMMMMMMMMMMMMMMMM *)
(* MMMMMMMMMMMWl:KMMMMMMWN0dolldOXWMMMMMMMMMWN0dolldOXWMMMMMMMMMMMMMMMMMMMMMMM *)
(* MMMMMMMMMMMNl;0MMMMMMMMMMWN0xollokKWMMMMMMMMMMN0xollokKWMMMMMMMMMMMMMMMMMMM *)
(* MMMMMMMMMMMWOllodOXWMMMMMMMMMMNKxollodkKWMMMMMMMMMNKxollokKWMMMMMMMMMMMMMMM *)
(* MMMMMMMMMMMMMWNOdolldOXWMMMMMMMMMMWKkdollox0NMMMMMMMMMWKkolllxXWMMMMMMMMMMM *)
(* MMMMMMMMMMMMMMMMMWN0xollokKWMMMMMMMMMMMWXkdllox0NWMMMMMWXOo;'.lNMMMMMMMMMMM *)
(* MMMMMMMMMMMMMMMMMMMMMMN0xollokKWMMMMMMMMMMMWXOdllldO0kollodO0:cNMMMMMMMMMMM *)
(* MMMMMMMMMMMMMMMMMMMMMMMMMMWKkollox0NMMMMMMMMMMMWXOd;'cx0NMMMXccNMMMMMMMMMMM *)
(* MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKkolloox0NWMMMMMMMMWo;0MMMMMMXccNMMMMMMMMMMM *)
(* MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0l,..l0WMMMMMMMWo;0MMMMMW0;cNMMMMMMMMMMM *)
(* MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWN0xollodOXWMMMMMMMMWo;0MN0xolloOWMMMMMMMMMMM *)
(* MMMMMMMMMMMMMMMMMMMMMMMMMMWNOdolldOXWMMMMMMMMMMMMMWl.colldkKNWWMMMMMMMMMMMM *)
(* MMMMMMMMMMMMMMMMMMMMMMWXOdllldOXWMMMMMMMMMMMMMWXOdlccdOXWNKko:dNMMMMMMMMMMM *)
(* MMMMMMMMMMMMMMMMMMWXOdllod0NWMMMMMMMMMMMMMWNOdllox0NWX0xolloo,cNMMMMMMMMMMM *)
(* MMMMMMMMMMMMMMWXOdllox0NWMMMMMMMMMMMMMWN0dllld0NWMM0lcodOXWMXccNMMMMMMMMMMM *)
(* MMMMMMMMMMMWKdllox0NMMMMMMMMMMMMMMN0xoolldONWMMMMMWo,OMMMMMMX:cNMMMMMMMMMMM *)
(* MMMMMMMMMMMWl,kNMMMMMMMMMMMMMMN0xolldxOXWMMMMMMMMMWo;0MMMMMMX:cNMMMMMMMMMMM *)
(* MMMMMMMMMMMWl:KMMMMMMMMMMMN0xolldOXWMMMMMMMMMMMMMMWo;0MMMMMMXccNMMMMMMMMMMM *)
(* MMMMMMMMMMMWl:KMMMMMMMMW0l;;lkXWMMMMMMMMMMMMMMMMMMWo;0MMMMMMXccNMMMMMMMMMMM *)
(* MMMMMMMMMMMWl:KMMMMMMMMWXxlclokKWMMMMMMMMMMMMMMMMMWo;0MMMMMMXccNMMMMMMMMMMM *)
(* MMMMMMMMMMMWl,xXWMMMMMMMMMMWKkollox0NWMMMMMMMMMMMMWo;0MMMMMMXccNMMMMMMMMMMM *)
(* MMMMMMMMMMMMKxolldkKWMMMMMMMMMMWKkdlllox0NMMMMMMMMWo;0MMMMMMXccNMMMMMMMMMMM *)
(* MMMMMMMMMMMMMMMN0xollokKNMMMMMMMMMMWX0Odllod0NWMMMWo;0MMMMMMXccNMMMMMMMMMMM *)
(* MMMMMMMMMMMMMMMMMMMWKkollox0NWMMMMMMMMMMWXOdllldOXNo;0MMMMMMXccNMMMMMMMMMMM *)
(* MMMMMMMMMMMMMMMMMMMMMMMWXkdllod0NWMMMMMMMMMMWN0doll',0MMMMMMXccNMMMMMMMMMMM *)
(* MMMMMMMMMMMMMMMMMMMMMMMMMMMWXOdllldOXWWMMMMMMMMMMN0;,0MMMMMMNccNMMMMMMMMMMM *)
(* MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWN0xollldkKWMMMMMMMWo;0MMMMMMXccNMMMMMMMMMMM *)
(* MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNX0xollokKWMMMWo;0MMMMNKd,lNMMMMMMMMMMM *)
(* MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKkollox0Xo;0XOdollokXMMMMMMMMMMMM *)
(* MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkdll,.:lodOXWMMMMMMMMMMMMMMM *)
(* MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOkKNWMMMMMMMMMMMMMMMMMMM *)
(* MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM *)

(* The mutable variables *)
field author_name: String = authorName
field twitter_id: String = twitterID
field upvote_counter: Uint256 = Uint256 0
field vote_map: Map ByStr20 Bool = Emp ByStr20 Bool

(* The upvote transition *)
transition upvote()
    has_voted <- exists vote_map[_sender];
    upvote_count <- upvote_counter;
    match has_voted with
    | True =>
        (* The transition sender has already upvoted *)
        e = {_eventname: "AlreadyVoted"; upvote_count: upvote_count};
      event e
    | False =>
        (* The transition sender has not upvoted yet *)
        new_upvote_count = builtin add upvote_count one;
        (* Update the mutable field variables *)
        vote_map[_sender] := true;
        upvote_counter := new_upvote_count;
        e = {_eventname: "Voted"; shoutout: "Zilliqa loves you!"; upvote_count: new_upvote_count};
        event e
    end
end

(* The whoami transition *)
transition whoami()
    author <- author_name;
    twitter_id_value <- twitter_id;
    e = {_eventname: "WhoAmI"; author_name: author; twitter_id: twitter_id_value};
    event e
end
