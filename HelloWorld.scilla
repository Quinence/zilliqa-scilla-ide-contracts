scilla_version 0
(* HelloWorld Contract *)
(* It is a simple contract that allows a specified account *)
(* denoted owner to set a welcome message. Setting the welcome *)
(* message is done via setHello (msg: String). The contract *)
(* also provides an interface getHello() to allow any account *)
(* to be returned with the welcome message when called. *)

(***************************************************)
(*               Associated library                *)
(***************************************************)
library HelloWorld

(* Library codes to be used for communication *)
let not_owner_code  = Uint32 1
let set_hello_code  = Uint32 2

(***************************************************)
(*             The contract definition             *)
(***************************************************)
contract HelloWorld
(owner: ByStr20)

(* The mutable variable initiated as an empty string *)
field welcome_message : String = ""

(* The setHello transition *)
transition setHello (new_message : String)
  (* Check if the sender of the transition is the owner of the contract *)
  is_owner = builtin eq owner _sender;
  match is_owner with
  | False =>
    (* If the sender of the transition is not the owner *)
    e = {_eventname : "setHello"; code : not_owner_code};
    event e
  | True =>
    (* If the sender of the transition is the owner *)
    (* Set the mutable variable to the new message provided when calling the transition *)
    welcome_message := new_message;
    e = {_eventname : "setHello"; code : set_hello_code};
    event e
  end
end

(* The getHello transition *)
transition getHello ()
  (* Fetching the value of the contract field welcome_message and storing in the local variable message_value *)
  message_value <- welcome_message;
  e = {_eventname: "getHello"; message: message_value};
  event e
end
