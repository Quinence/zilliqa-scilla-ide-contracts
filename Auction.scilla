scilla_version 0

(* Auction Contract *)
(* A simple open auction contract where bidders can make their bid using Bid(), *)
(* and the highest and winning bid amount goes to a predefined account. Bidders who *)
(* donâ€™t win can take back their bid using the transition Withdraw(). The organizer *)
(* of the auction can claim the highest bid by invoking the transition AuctionEnd(). *)

(* Imported library *)
import BoolUtils

(***************************************************)
(*               Associated library                *)
(***************************************************)
library OpenAuction

(* A library function to construct a list consisting of one message *)
let one_msg =
    fun (msg: Message) =>
        let nil_msg = Nil {Message} in
        Cons {Message} msg nil_msg

(* A library function to check if the first block is less than *)
(* or equal than the second block with respect to the block time *)
let block_leq =
    fun (block1: BNum) =>
    fun (block2: BNum) =>
        let bc1 = builtin blt block1 block2 in
        let bc2 = builtin eq block1 block2 in
        orb bc1 bc2

(* Library codes to be used for communication *)
let late_to_bid_code = Int32 1
let too_early_to_bid_code = Int32 2
let bid_too_low_code = Int32 3
let first_bid_accepted_code = Int32 4
let bid_accepted_code = Int32 5
let money_sent_code = Int32 6
let nothing_to_withdraw_code = Int32 7
let auction_is_still_on_code = Int32 8
let auction_end_code = Int32 9

(* Library codes for convenience *)
let one = Uint128 1
let zero = Uint128 0

let true = True
let false = False


(***************************************************)
(*             The contract definition             *)
(***************************************************)
contract OpenAuction (
    auction_start: BNum,
    bidding_time: Uint128,
    beneficiary: ByStr20
)

(* The mutable variables *)
field auction_auction_ended: Bool = False
field highest_bidder: Option ByStr20 = None {ByStr20}
field highest_bid: Uint128 = zero
field pending_returns: Map ByStr20 Uint128 = Emp ByStr20 Uint128


(* The Bid transition *)
transition Bid ()
    block_numbr <- & BLOCKNUMBER;
    end_time = builtin badd auction_start bidding_time;
    after_end = builtin badd end_time one;
    ended <- auction_ended;
    in_time = block_leq after_end block;
    flag1 = orb in_time ended;
    early = block_leq block auction_start;
    match early with
    | True =>
        msg = {_tag: ""; _recipient: _sender; _amount: zero; code: too_early_to_bid_code};
        msgs = one_msg msg;
        send msgs
    | False =>
        match flag1 with
        | True =>
            msg = {_tag: ""; _recipient: _sender; _amount: zero; code: late_to_bid_code};
            msgs = one_msg msg;
            send msgs
        | False =>
            highest_bid_value <- highest_bid;

            (* Checks if the bid is too low *)
            sufficientBid = builtin lt highest_bid_value _amount;
            match sufficientBid with
            | False =>
                msg = {_tag: ""; _recipient: _sender; _amount: zero; code: bid_too_low_code};
                msgs = one_msg msg;
                send msgs
            | True =>
                accept;
                old_highest_bidder <- highest_bidder;

                match old_highest_bidder with
                | Some old_highest_bidder =>
                    (* There is already a highest bidder *)
                    pending_check <- pending_returns[old_highest_bidder];

                    pending_old_highest_bidder = match pending_check with
                    | Some pending_check =>
                        (* User already has some balance in the pending returns that is not claimed *)
                        builtin add highest_bid_value pending_check
                    | None => hb
                (* Prev highest bidder has no pending returns. *)
                end;
            pending_returns[old_highest_bidder] := pending_old_highest_bidder;
                    (* Update the highest bidder *)
                    bidder = Some {ByStr20} _sender;
                    highest_bidder := bidder;
                    highest_bid := _amount;
                    e = {_eventname: "Bid"; code: bid_accepted_code; addr: _sender; amount: _amount};
                    event e
                | None =>
                    (* Process first bid *)
                    first_bidder = Some {ByStr20} _sender;
                    highest_bidder := first_bidder;
                    highest_bid := _amount;
                    e = {_eventname: "Bid"; code: first_bid_accepted_code; addr: _sender; amount: _amount};
                    event e
                end
            end
        end
    end
end

(* Withdraw transition to claim back money *)
transition Withdraw ()
    pending_returns_value <- pending_returns;
    sender_pending = builtin get pending_returns_value _sender;
    match sender_pending with
    | None =>
        msg = {_tag: ""; _recipient: _sender; _amount: zero; code: nothing_to_withdraw_code};
        msgs = one_msg msg;
        send msgs
    | Some sender_pending =>
        delete pending_returns[_sender];
        e = {_eventname: "Withdraw Successful"; addr: _sender};
        event e;
        msg = {_tag: ""; _recipient: _sender; _amount: sender_pending; code: money_sent_code};
        msgs = one_msg msg;
        send msgs
    end
end


(* AuctionEnd transition to end the auction *)
transition AuctionEnd ()
    block <- & BLOCKNUMBER;
    auction_ended_value <- auction_ended;
    auction_and_bid = builtin badd auction_start bidding_time;
    auction_has_started = block_leq auction_and_bid block;
    auction_not_ended = negb auction_ended;
    auction_is_running = andb auction_has_started auction_not_ended;
    match auction_is_running with
    | False =>
        msg = {_tag: ""; _recipient: _sender; _amount: zero; code: auction_is_still_on_code};
        msgs = one_msg msg;
        send msgs
    | True =>
        auction_ended := true;
        highest_bid_value <- highest_bid;
        e = {_eventname: "Auction ended"; highest_bid: hb};
        event e;
        msg = {_tag: ""; _recipient: beneficiary; _amount: hb; code: auction_end_code; highest_bid: hb};
        msgs = one_msg msg;
        send msgs
    end
end